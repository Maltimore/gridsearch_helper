#!/usr/bin/env python3
import sys
import os
from argparse import Namespace
import shutil
import copy
import subprocess
import datetime
import platform
import warnings
import itertools
import time

import click
import yaml


@click.command()
@click.option('--output-path',
              type=str,
              required=True,
              help='Output directory.')
@click.option('--launch-script',
              type=str,
              default='cluster/SLURM_entry.sh',
              help=(
                  'Default is ./cluster/SLURM_entry.sh. '
                  'Path to the script that should be run. '
                  'You should take the example script at SLURM/SLURM_entry.sh and '
                  'modify it to your needs. '
                  'You can then place your modified copy of SLURM_entry.sh (possibly renamed) '
                  'and place it somewhere on your system. '
                  'Then, provide the path to that script here.'
              ))
@click.option('--params-path',
              type=str,
              default='parameters.yaml',
              help=('Default is ./parameters.yaml. Path to parameters file. If '
                    '\'None\', then parameters are ignored. This means that there '
                    'will be no assigning of gridsearh parameters, and no '
                    'parameters yaml file will be explicitly copied. Of course, if '
                    'a parameter file is part of your git repository, that will '
                    'still be available to your program.')
              )
@click.option('--taskrange-begin',
              type=int,
              default=0,
              help='Default is 0.')
@click.option('--taskrange-end',
              type=int,
              default=0,
              help='Default is 0.')
@click.option('--job-name',
              default=None,
              type=str,
              help='By default the last directory of --output-path is the job name.')
@click.option('--time',
              default='None',
              type=str,
              help=('Time limit for each task. Default is None. '
                    'For format see documentation of slurm, e.g. man srun')
              )
@click.option('--mem',
              default='30G',
              type=str,
              help=('How much memory to reserve. For format see slurm documentation, '
                   'e.g. 4 GB is represented as 4G')
              )
@click.option('--partition',
              default='cpu-2h',
              type=str,
              help=('Name of the partition to run on. Tip: Find available partitions on SLURM '
                    'with sinfo.')
              )
@click.option('--export-variables',
              default='',
              type=str,
              help=('Export extra variables to the SLURM job. Format: var1=hello,var2=world')
              )
@click.option('--use-repository-copy',
              default=True,
              type=bool,
              help=('Create and use a copy of your repository during the run. '
                    'If a repository already exists, you will be asked if it '
                    'shall be overwritten.')
              )
@click.option('--action',
              default='launch',
              type=click.Choice(('launch', 'setup', 'cleanup')),
              help=(
                  'As an enduser, you do not have to worry about this option. '
                  'It is for internal use only.')
              )
def main(**kwargs):
    args = Namespace(**kwargs)

    if args.action == 'setup':
        return setup()
    elif args.action == 'cleanup':
        return cleanup()

    args.output_path = os.path.abspath(args.output_path)
    args.launch_script = os.path.abspath(args.launch_script)
    # job_name
    if args.job_name is None:
        job_name = os.path.basename(args.output_path)
        print(f'Job name set to {job_name}')
    else:
        job_name = args.job_name

    if os.path.exists(args.output_path):
        print(f"Output directory {args.output_path} already exists, "
              "should we continue?")
        if not input('[y to continue]') == 'y':
            sys.exit('Ok, no job started')
    else:
        os.makedirs(args.output_path)

    task_range = range(args.taskrange_begin, args.taskrange_end + 1)
    job_output_paths = [os.path.join(args.output_path, 'job_outputs', str(job_idx).zfill(5)) for job_idx in task_range]
    for job_output_path in job_output_paths:
        os.makedirs(job_output_path, exist_ok=True)

    if args.params_path.lower() != 'none':
        args.params_path = os.path.abspath(args.params_path)
        # copy the params file to the output folder, regardless of whether this
        # is an array-job or not. If it is an array-job, we will later copy
        # appropriate params files into each output directory (for each job)
        params_copy_path = os.path.join(args.output_path, 'parameters.yaml')
        if not os.path.exists(params_copy_path):
            shutil.copyfile(args.params_path, params_copy_path)
        # assign hyperparams for each point on the grid and create yaml files
        # for each job
        with open(args.params_path, 'r') as fd:
            params = yaml.safe_load(fd)
        for i, job_idx in enumerate(task_range):
            job_output_path = job_output_paths[i]  # remember that job_idx does not have to be equal to i
            job_params = assign_hyperparams(job_idx, copy.deepcopy(params))
            with open(os.path.join(job_output_path, 'parameters.yaml'), 'w') as fd:
                yaml.dump(job_params, fd)

    # copy the repository
    if args.use_repository_copy:
        repository_copy_path = os.path.join(args.output_path, 'repository')
        if os.path.exists(repository_copy_path) and input('Overwrite repository copy in output path? (y/n)').lower() == 'y':
            shutil.rmtree(repository_copy_path)
        if not os.path.exists(repository_copy_path):
            print(f'Making repository directory {repository_copy_path}')
            os.makedirs(repository_copy_path)

            print('Creating archive of git repository, including tracked changes '
                  '(but not untracked changes)')
            # when the user is not in the git root directory and we perform git
            # archive, only the contents of the current directory are put into the
            # archive capture_output=True checks the stdout and stderr of a command
            # text=True transforms to proper text (utf-8 presumably)
            # rstrip removes whitespace from the end of the string (in our case, a newline character)
            git_root_directory = subprocess.run(
                ['git', 'rev-parse', '--show-toplevel'],
                capture_output=True,
                text=True
            ).stdout.rstrip()
            print(f'Found git root directory to be {git_root_directory}')
            # if this command doesn't return 0, git status is dirty
            git_status_dirty = os.system('git diff-index --quiet HEAD')
            if git_status_dirty:
                # git status is dirty, create archive from stash
                # create a stash and save the hash
                # sometimes this does not work so we try 10 times
                for _ in range(10):
                    try:
                        completed_process = subprocess.run(
                            ['git', 'stash', 'create'],
                            capture_output=True,
                            text=True,
                            check=True
                        )
                    except subprocess.CalledProcessError as e:
                        print(e)
                        print('Trying again')
                        continue
                    else:
                        break
                else:
                    # if for loop ran 10 times without sucess, i.e. we did not break out of the loop
                    raise Exception('Tried to create the stash 10 times without success')
                stash_hash = completed_process.stdout.rstrip()
                time.sleep(0.5)
                print(f'Created git stash with hash: {stash_hash}')
                command = [
                    'git', 'archive',
                    '-o', os.path.join(args.output_path, 'temporary_git_stash_archive.tar'),
                    stash_hash,
                    git_root_directory
                ]
                print(f'Running command: "{command}" to create an archive of the hash')
                subprocess.run(command)
            else:
                # git status is clean, create archive from HEAD
                os.system(
                    f'git archive -o {args.output_path}/temporary_git_stash_archive.tar HEAD {git_root_directory}'
                )
            print(f'Unpacking git archive to {repository_copy_path}')
            os.system(f'tar -xf {args.output_path}/temporary_git_stash_archive.tar -C {repository_copy_path}')
            os.system(f'rm {args.output_path}/temporary_git_stash_archive.tar')

        print(f'Switching to repository directory {repository_copy_path}')
        os.chdir(repository_copy_path)
        print(f'Now in {os.getcwd()}')

    sbatch_command = [
        'sbatch',
        f'--export=ALL,LAUNCH_SCRIPT={__file__},OUTPUT_PATH={args.output_path},{args.export_variables}',
        f'--output={args.output_path}/job_outputs/%5a/sdout',
        f'--error={args.output_path}/job_outputs/%5a/sderror',
        f'--job-name={job_name}',
        f'--array={args.taskrange_begin}-{args.taskrange_end}',
        f'--mem={args.mem}',
        f'--partition={args.partition}',
    ]
    if args.time != 'None':
        sbatch_command.append(f'--time={args.time}')
    sbatch_command.append(args.launch_script)
    subprocess.run(sbatch_command)


def setup():
    start_time = datetime.datetime.now()
    print(f"start time: {start_time}")
    run_info = {
        "start_time": str(start_time),
        "git_hash": get_git_info()["git_hash"],
        "git_status": get_git_info()["git_status"],
        "hostname": platform.uname()[1],
        "run_finished": False,
        "task_id": int(os.environ['SLURM_ARRAY_TASK_ID']),
        "random_seed": int(os.environ['RANDOM_SEED']),
    }
    with open(os.path.join(os.environ['OUTPUT_PATH'], 'run_info.yaml'), "w") as fd:
        yaml.dump(run_info, fd)


def cleanup():
    with open(os.path.join(os.environ['OUTPUT_PATH'], 'run_info.yaml'), 'r') as fd:
        run_info = yaml.safe_load(fd)
    end_time = datetime.datetime.now()
    run_time_seconds = (
        end_time - datetime.datetime.strptime(run_info['start_time'], '%Y-%m-%d %H:%M:%S.%f')
    ).seconds
    run_time_human_readable = str(datetime.timedelta(seconds=run_time_seconds))
    print(f"End time : {end_time}")
    print(f"Run time (H:MM:SS): {run_time_human_readable}", flush=True)
    run_info["end_time"] = str(end_time)
    run_info["run_time_seconds"] = run_time_seconds
    run_info["run_time_human_readable"] = run_time_human_readable
    run_info["run_finished"] = True
    with open(os.path.join(os.environ['OUTPUT_PATH'], 'run_info.yaml'), "w") as fd:
        yaml.dump(run_info, fd)


def flatten_dict(dictionary):
    """
    This function recursively flattens an arbitrarily nested dictionary.
    The keys into the flattened dictionary are tuples of the form
    (key, sub_key, sub_sub_key..)
    :param dictionary: (possibly nested) dict
    """
    def flatten_recursive(flat_tuple, dictionary, flattened):
        for key, value in dictionary.items():
            new_flat_tuple = flat_tuple + (key,)
            if isinstance(value, dict):
                flattened = flatten_recursive(new_flat_tuple, value, flattened)
            else:
                flattened[new_flat_tuple] = value
        return flattened

    flattened = {}
    return flatten_recursive(tuple(), dictionary, flattened)


def assign_hyperparams(id_, params):
    """assign_hyperparameters
    Maps an index to a hyperparameter combination. In params, values that are lists
    are interpreted to be those for which different combinations should be tested.

    :param id_: scalar, indicates whic parameter combination to assign
    :param params: dict holding the hyperparameters.
    :returns params: returns a copy of params with list-values replaced by
        list items corresponding to the relevant hyperparameter combination.
    """
    new_params = copy.deepcopy(params)

    flattened = flatten_dict(new_params.pop('gridsearch'))
    flattened_keys_repeated = [list(itertools.repeat(subkey, len(flattened[subkey]))) for subkey in flattened.keys()]
    key_combos = list(itertools.product(*flattened_keys_repeated))
    param_combos = list(itertools.product(*flattened.values()))
    idx_into_combos = (id_ - 1) % len(param_combos)
    key_combo = key_combos[idx_into_combos]
    param_combo = param_combos[idx_into_combos]
    for key_idx, key in enumerate(key_combo):
        temp_dict = new_params
        for subkey in key[:-1]:
            temp_dict = temp_dict[subkey]
        temp_dict[key[-1]] = param_combo[key_idx]
    return new_params


def get_git_info():
    try:
        return_dict = {
            "git_hash": subprocess.check_output(['git', 'rev-parse', 'HEAD']
                                                ).decode('utf-8').strip('\n'),
            "git_status":  subprocess.check_output(['git', 'status', '--porcelain']
                                                   ).decode('utf-8'),
        }
    except Exception:
        warnings.warn('\nWarning! Failed to get git revision hash!\n')
        return_dict = {
            "git_hash": "failed_to_get",
            "git_status": "failed_to_get"
        }
    return return_dict


if __name__ == "__main__":
    main()
