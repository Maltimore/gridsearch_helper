#!/usr/bin/env python
import sys
import os
from argparse import Namespace
import shutil
import pathlib
import copy
import subprocess
import datetime
import platform
import warnings
import itertools

import click
import yaml


@click.command()
@click.option('--path',
              type=str,
              required=True,
              help='Output directory.')
@click.option('--launch-script',
              type=str,
              default='cluster/SLURM_entry.sh',
              help=(
                  'Default is ./cluster/SLURM_entry.sh. '
                  'Path to the script that should be run. '
                  'You should take the example script at SGE/SGE_entry.sh and '
                  'modify it to your needs. '
                  'You can then place your modified copy of SGE_entry.sh (possibly renamed) '
                  'and place it somewhere on your system. '
                  'Then, provide the path to that script here.'
              ))
@click.option('--params-path',
              type=str,
              default='parameters.yaml',
              help='Default is ./parameters.yaml. Path to parameters file.')
@click.option('--taskrange-begin',
              type=int,
              default=1,
              help='Default is 1.')
@click.option('--taskrange-end',
              type=int,
              default=1,
              help=(
                  'Default is 1. '
                  'If (taskrange-end - taskrange-begin) = 1, this will be a normal (non-array) job.'
              ))
@click.option('--job-name',
              default=None,
              type=str,
              help='Default is the output directory of --path as the job name.')
@click.option('--action',
              default='launch',
              type=click.Choice(('launch', 'setup', 'cleanup')),
              help=(
                  'As an enduser, you do not have to worry about this option. '
                  'It is for internal use only.'
              ))
def main(**kwargs):
    args = Namespace(**kwargs)

    if args.action == 'setup':
        return setup()
    elif args.action == 'cleanup':
        return cleanup()

    args.path = os.path.abspath(args.path)
    args.launch_script = os.path.abspath(args.launch_script)
    args.params_path = os.path.abspath(args.params_path)
    # job_name
    if args.job_name is None:
        args.job_name = os.path.basename(args.path)
        print(f'Job name set to {args.job_name}')

    if os.path.exists(args.path):
        print(f"Output directory {args.path} already exists, "
              "should we continue?")
        if not input('[y to continue]') == 'y':
            sys.exit('Ok, no job started')
    else:
        os.makedirs(args.path)
    if not os.path.exists(os.path.join(args.path, 'stdin_and_out')):
        os.makedirs(os.path.join(args.path, 'stdin_and_out'))

    array_job = True if args.taskrange_end - args.taskrange_begin > 0 else False
    # copy the params file to the output folder, regardless of whether this is an
    # array-job or not. If it is an array-job, we will later copy appropriate
    # params files into each output directory (for each job)
    shutil.copyfile(args.params_path, os.path.join(args.path, 'parameters.yaml'))

    if array_job:
        with open(pathlib.Path(args.params_path), 'r') as fd:
            params = yaml.safe_load(fd)
        if not os.path.exists(os.path.join(args.path, 'job_outputs')):
            os.makedirs(os.path.join(args.path, 'job_outputs'))

        for job_idx in range(args.taskrange_begin, args.taskrange_end + 1):
            job_output_dir = os.path.join(args.path, 'job_outputs', str(job_idx).zfill(5))
            if not os.path.exists(job_output_dir):
                os.makedirs(job_output_dir)
            job_params = assign_hyperparams(job_idx, copy.deepcopy(params))
            with open(pathlib.Path(job_output_dir, 'parameters.yaml'), "w") as fd:
                yaml.dump(job_params, fd)

    repository_copy_path = os.path.join(args.path, 'repository')
    if os.path.exists(repository_copy_path):
        print('There is already a (possibly old or incomplete) copy of the repository at the '
              'selected output path ' + repository_copy_path)
        answer = input('Delete the copy and re-create it? (y/n)')
        if answer == 'y':
            print(f'Ok, deleting directory at {repository_copy_path}')
            shutil.rmtree(repository_copy_path)
    if not os.path.exists(repository_copy_path):
        # repository copy does not exist yet, create it
        print(f'Making repository directory {repository_copy_path}')
        os.makedirs(repository_copy_path)

        print('Creating archive of git repository, including tracked changes '
              '(but not untracked changes)')
        # when the user is not in the git root directory and we perform git
        # archive, only the contents of the current directory are put into the
        # archive capture_output=True checks the stdout and stderr of a command
        # text=True transforms to proper text (utf-8 presumably)
        # rstrip removes whitespace from the end of the string (in our case, a newline character)
        git_root_directory = subprocess.run(
            ['git', 'rev-parse', '--show-toplevel'],
            capture_output=True,
            text=True
        ).stdout.rstrip()
        git_status_clean = not os.system('git diff-index --quiet HEAD')
        if not git_status_clean:
            # git status is dirty, create archive from stash
            # create a stash and save the hash
            stash_hash = subprocess.run(
                ['git', 'stash', 'create'],
                capture_output=True,
                text=True
            ).stdout.rstrip()
            command = [
                'git', 'archive',
                '-o', os.path.join(args.path, 'temporary_git_stash_archive.tar'),
                stash_hash,
                git_root_directory
            ]
            subprocess.run(command)
        else:
            # git status is clean, create archive from HEAD
            os.system(
                f'git archive -o {args.path}/temporary_git_stash_archive.tar HEAD {git_root_directory}'
            )
        print(f'Unpacking git archive to {repository_copy_path}')
        os.system(f'tar -xf {args.path}/temporary_git_stash_archive.tar -C {repository_copy_path}')
        os.system(f'rm {args.path}/temporary_git_stash_archive.tar')

    print(f'Switching to repository directory {repository_copy_path}')
    os.chdir(repository_copy_path)
    print(f'Now in {os.getcwd()}')

    qsub_command = ([
        'sbatch',
        f'--export=ALL,QLAUNCH_SCRIPT={__file__},OUTPUT_PATH={args.path}',
        f'--job-name={args.job_name}',
        f'--array={args.taskrange_begin}-{args.taskrange_end}',
        args.launch_script
    ])

    print('Running the following qsub command now:')
    print(qsub_command)
    subprocess.run(qsub_command)


def setup():
    start_time = datetime.datetime.now()
    print(f"SGE_entry start time: {start_time}")

    run_info = {
        "start_time": str(start_time),
        "git_hash": get_git_info()["git_hash"],
        "git_status": get_git_info()["git_status"],
        "array_job": True if os.environ['ARRAY_JOB'] == 1 else False,
        "hostname": platform.uname()[1],
        "run_finished": False,
        "task_id": int(os.environ['SGE_TASK_ID']),
        "random_seed": int(os.environ['RANDOM_SEED']),
    }
    with open(pathlib.Path(os.environ['OUTPUT_PATH'], 'run_info.yaml'), "w") as fd:
        yaml.dump(run_info, fd)


def cleanup():
    with open(pathlib.Path(os.environ['OUTPUT_PATH'], 'run_info.yaml'), 'r') as fd:
        run_info = yaml.safe_load(fd)
    end_time = datetime.datetime.now()
    run_time_seconds = (
        end_time - datetime.datetime.strptime(run_info['start_time'], '%Y-%m-%d %H:%M:%S.%f')
    ).seconds
    print(f"End time (SGE_entry): {end_time}")
    print(f"Run time (SGE_entry) (seconds): {run_time_seconds}", flush=True)

    run_info["end_time"] = str(end_time)
    run_info["run_time_seconds"] = run_time_seconds
    run_info["run_finished"] = True
    with open(pathlib.Path(os.environ['OUTPUT_PATH'], 'run_info.yaml'), "w") as fd:
        yaml.dump(run_info, fd)


def flatten_dict(dictionary):
    """
    This function recursively flattens an arbitrarily nested dictionary.
    The keys into the flattened dictionary are tuples of the form
    (key, sub_key, sub_sub_key..)
    :param dictionary: (possibly nested) dict
    """
    dictionary = copy.deepcopy(dictionary)
    flattened = {}
    for key in dictionary.keys():
        if isinstance(dictionary[key], dict):
            flattened = flatten_dict(dictionary[key])
            for sub_key in flattened.keys():
                flattened[(key,) + sub_key] = flattened[sub_key]
        else:
            # the value at this key is not a dictionary, so just assign the value
            # to the flattened dict (but make the key a tuple)
            flattened[(key,)] = dictionary[key]
    return flattened


def assign_hyperparams(id_, params):
    """assign_hyperparameters
    Maps an index to a hyperparameter combination. In params, values that are lists
    are interpreted to be those for which different combinations should be tested.

    :param id_: scalar, indicates whic parameter combination to assign
    :param params: dict holding the hyperparameters.
    :returns params: returns a copy of params with list-values replaced by
        list items corresponding to the relevant hyperparameter combination.
    """
    gridsearch_params = params['gridsearch']
    flattened_gridsearch_params = flatten_dict(gridsearch_params)
    param_combos = list(itertools.product(*flattened_gridsearch_params.values()))
    param_combo = param_combos[(id_ - 1) % len(param_combos)]
    for key_idx, key in enumerate(flattened_gridsearch_params.keys()):
        if len(key) == 2:
            params['default'][key[1]] = param_combo[key_idx]
        else:
            subdict = params['default'][key[1]]
            for subkey in key[2:-1]:
                subdict = subdict[subkey]
            subdict[key[-1]] = param_combo[key_idx]
    return params


def get_git_info():
    try:
        return_dict = {
            "git_hash": subprocess.check_output(['git', 'rev-parse', 'HEAD']
                                                ).decode('utf-8').strip('\n'),
            "git_status":  subprocess.check_output(['git', 'status', '--porcelain']
                                                   ).decode('utf-8'),
        }
    except Exception:
        warnings.warn('\nWarning! Failed to get git revision hash!\n')
        return_dict = {
            "git_hash": "failed_to_get",
            "git_status": "failed_to_get"
        }
    return return_dict


if __name__ == "__main__":
    main()
